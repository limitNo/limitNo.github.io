<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>汇编语言学习-基础认知</title>
    <url>/2020/07/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E8%AE%A4%E7%9F%A5/</url>
    <content><![CDATA[<h1 id="初识汇编语言——参考《汇编语言第三版（王爽）》"><a href="#初识汇编语言——参考《汇编语言第三版（王爽）》" class="headerlink" title="初识汇编语言——参考《汇编语言第三版（王爽）》"></a>初识汇编语言——参考《汇编语言第三版（王爽）》</h1><a id="more"></a>
<h2 id="1-机器语言"><a href="#1-机器语言" class="headerlink" title="1.机器语言:"></a>1.机器语言:</h2><ul>
<li>机器语言是机器指令的集合。 机器指令也就是一台计算机可以正确执行的一段二进制数(类似于1010101010101010110的机器码)。计算机将其转变为高低电平，使计算机的电子器件收到驱动。</li>
</ul>
<h2 id="2-汇编语言"><a href="#2-汇编语言" class="headerlink" title="2.汇编语言:"></a>2.汇编语言:</h2><ul>
<li><p>因机器指令晦涩难懂不方便人们直接使用,所以汇编语言便诞生了</p>
</li>
<li><p>汇编语言其实也就是汇编指令,它和机器指令的区别在于表示方法上.比如如下代码意思相同都是将0005存入ax寄存器:</p>
<pre><code>机器指令:   1011 1000 0000 0101 0000 0000 
汇编指令:   mov ax,0005</code></pre></li>
<li><p>汇编指令是机器指令的助记符,和机器指令一一对应.</p>
</li>
<li><p>每种cpu都有自己的汇编指令集</p>
</li>
</ul>
<h2 id="3-汇编语言的组成"><a href="#3-汇编语言的组成" class="headerlink" title="3.汇编语言的组成:"></a>3.汇编语言的组成:</h2><pre><code>1.汇编指令:机器码的助记符,有对应的机器码
2.伪指令:没有对应的机器码,由编译器执行,计算机不执行
3.其他符号:+-*/,由编译器识别,没有对应的机器码</code></pre><h2 id="4-存储器"><a href="#4-存储器" class="headerlink" title="4.存储器:"></a>4.存储器:</h2><ul>
<li><p>二进制指令和数据存放在存储器中</p>
</li>
<li><p>在<strong>存储器中</strong>指令和数据没有区别,都是二进制信息</p>
</li>
<li><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><ul>
<li><p>存储器被分为<strong>若干个</strong>存储单元,每个存储单元从0开始编号,</p>
<blockquote>
<p>这些编号可以看作存储单元在储存器中的地址</p>
</blockquote>
</li>
<li><p>一个存储单元可以<strong>存储一个Byte</strong>,也就是一个字节.</p>
</li>
<li><p>一个字节  = 8 个2进制位</p>
</li>
<li><p>1 Byte = 8 bit</p>
</li>
<li><p>1 bit = 1个2进制位</p>
</li>
</ul>
</li>
</ul>
<h2 id="5-cpu对存储器的读写"><a href="#5-cpu对存储器的读写" class="headerlink" title="5.cpu对存储器的读写"></a>5.cpu对存储器的读写</h2><ul>
<li><p>cpu要想对进行数据的读写,必须和外部器件进行下面3类的信息交互.</p>
<blockquote>
<p>存储单元的地址(地址信息)</p>
<p>器件的选择,独或写的命令(控制信息)</p>
<p>读或写的数据(数据信息)</p>
</blockquote>
</li>
<li><p>cpu通过cpu和其他芯片的导线(总线)来进行电信号的传输</p>
<ul>
<li><p>从逻辑上分为:</p>
<blockquote>
<p>1.地址线</p>
<p>2.控制线</p>
<p>3.数据线</p>
</blockquote>
</li>
<li><p>如:cpu要从存储器的第2号存储单元读取数据的步骤如下</p>
<blockquote>
<p>1.cpu通过地址线将2号存储单元的地址信息发出</p>
<p>2.通过控制线找到2号存储单元并发出读数据的命令</p>
<p>3.数据线将2号存储单元的数据送入cpu</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="6-地址总线"><a href="#6-地址总线" class="headerlink" title="6.地址总线"></a>6.地址总线</h2><ul>
<li><p>用高电平或低电平来传输数据,用二进制表示就是0或1.一根导线可以表示0或1,那么10根导线可以表示10位的0或1(二进制数据). 而10位的二进制数的范围是:00 0000 0000 ~ 11 1111 1111    也就是0~1023(十进制).</p>
<pre><code>假如cpu有10根地址线,那么它的宽度为10,则它就可以寻找2的10次方个内存单元</code></pre></li>
</ul>
<h2 id="7-数据总线"><a href="#7-数据总线" class="headerlink" title="7.数据总线"></a>7.数据总线</h2><ul>
<li>cpu与内存和其他部件之间通过数据总线来进行数据传送,数据总线的宽度决定了cpu和外界传送数据的速度.8根数据总线一次可以传输<strong>一个8位二进制数据也就是一个字节</strong>,16根数据总线一次可以传输两个字节.</li>
</ul>
<h2 id="8-控制总线"><a href="#8-控制总线" class="headerlink" title="8.控制总线"></a>8.控制总线</h2><ul>
<li>cpu对外部器件的控制是通过控制总线来进行的.<strong>控制总线是一些不同控制线的集合</strong></li>
<li>控制总线的宽度决定了cpu对外部器件的控制能力</li>
</ul>
<h2 id="9-内存地址空间"><a href="#9-内存地址空间" class="headerlink" title="9.内存地址空间"></a>9.内存地址空间</h2><ul>
<li>一个cpu的地址总线的宽度为10,那么可以寻址1024个存储单元(0~1023),这个范围就构成这个cpu的内存地址空间</li>
</ul>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
